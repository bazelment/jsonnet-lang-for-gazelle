package jsonnet

import (
	"fmt"
	"path/filepath"
	"regexp"
	"sort"
	"strings"

	"github.com/bazelbuild/bazel-gazelle/label"
	"github.com/bazelbuild/bazel-gazelle/language"
	"github.com/bazelbuild/bazel-gazelle/rule"
)

const (
	dataImpPrivateAttr     = "_jsonnet_data_imports"
	jsonnetImpPrivateAttr  = "_jsonnet_imports"
	jsonnetSelfPrivateAttr = "_jsonnet_self"
)

var (
	ruleRe = regexp.MustCompile(`[^\w]+`)
)

func (*jsonnetLang) GenerateRules(args language.GenerateArgs) language.GenerateResult {
	var res language.GenerateResult

	conf := getJsonnetConfig(args.Config)
	if conf.shouldIgnoreFolder(args.Rel) {
		return res
	}

	for _, name := range args.RegularFiles {
		if !conf.isNativeImport(filepath.Ext(name)) {
			continue
		}
		finfo := jsonnetFileInfo(args, name)
		res.Gen = append(res.Gen, finfo.newLibraryRule(finfo.Path.ruleName(conf, libraryRulePrefix)))
		res.Gen = append(res.Gen, finfo.newToJSONRule(finfo.Path.ruleName(conf, toJSONRulePrefix)))
	}

	sort.SliceStable(res.Gen, func(i, j int) bool {
		return res.Gen[i].Name() < res.Gen[j].Name()
	})

	res.Imports = make([]interface{}, len(res.Gen))
	for i, r := range res.Gen {
		switch r.Kind() {
		case libraryRule:
			// The rule contains a private attribute with the imports
			// that we want to resolve back to deps in Resolve.
			res.Imports[i] = r.PrivateAttr(jsonnetImpPrivateAttr)
		case toJSONRule:
			// The rule contains a private attribute with the reference
			// to its own source file that we want to resolve back to
			// its deps in Resolve.
			res.Imports[i] = r.PrivateAttr(jsonnetSelfPrivateAttr)
		default:
			// To ensure len(res.Gen) == len(res.Imports)
			res.Imports[i] = nil
		}
	}

	return res
}

// https://github.com/bazelbuild/rules_jsonnet#user-content-jsonnet_library
//
// jsonnet_library
//
// This rule implementation will only generate rules with:
//
// name: 	[required] A unique name for this rule.
// srcs: 	[required] List of .jsonnet files that comprises this Jsonnet library.
// deps: 	<optional> List of targets that are required by the srcs Jsonnet files.
//
// This rule implementation will not generate (yet) rules with:
//
// imports: <optional> List of import -J flags to be passed to the jsonnet compiler.
func (finfo FileInfo) newLibraryRule(name string) *rule.Rule {
	r := rule.NewRule(libraryRule, name)
	r.SetAttr("srcs", []string{finfo.Path.Filename})
	r.SetAttr("visibility", []string{"//visibility:public"})

	// Mark jsonnet imports
	imports := make(map[string]FilePath, len(finfo.Imports))
	for imp, fpath := range finfo.Imports {
		imports[imp] = fpath
	}
	r.SetPrivateAttr(jsonnetImpPrivateAttr, imports)

	// Mark data imports
	dataImports := make(map[string]FilePath, len(finfo.DataImports))
	for imp, fpath := range finfo.DataImports {
		dataImports[imp] = fpath
	}
	r.SetPrivateAttr(dataImpPrivateAttr, dataImports)

	return r
}

// https://github.com/bazelbuild/rules_jsonnet#user-content-jsonnet_to_json
//
// jsonnet_to_json
//
// This rule implementation will only generate rules with:
//
// name:	[required]  A unique name for this rule.
// src:		[required]	The .jsonnet file to convert to JSON.
// outs:	[required]	Names of the output .json files to be generated by this rule.
// deps:	<optinoal>	List of targets that are required by the src Jsonnet file.
//
// This rule implementation will not generate (yet) rules with:
//
// multiple_outputs:	<optional>	Default: 0. Set to 1 to explicitly enable multiple file output
//									via the jsonnet -m flag.
// imports:				<optional>	List of import -J flags to be passed to the jsonnet compiler.
// stamp_keys:			<optional>	Specify which variables in ext_strs and ext_code should get stamped
//									by listing the matching dict keys.
// ext_strs:			<optional>	Map of strings to pass to jsonnet as external variables via --ext-str key=value.
// ext_str_envs:		<optional>	List of env var names containing strings to pass to jsonnet as external
//									variables via --ext-str key.
// ext_code:			<optional>	Map of code to pass to jsonnet as external variables via --ext-code key=value.
// ext_code_envs:		<optional>	List of env var names containing jsonnet code to pass to jsonnet as external
//									variables via --ext-code key.
// ext_str_files:		<optional>	(required for file_vars) List of string files that map to the var name defined
//									in file_vars at the same index and together are passed to jsonnet via --ext-str-file var=file.
// ext_str_file_vars: 	<optional>	(required for files) List of var names that maps to the file defined in files
//									at the same index and together are passed to jsonnet via --ext-str-file var=file.
// ext_code_files:		<optional>  List of jsonnet code files that map to the var name defined in ext_code_file_vars
//									at the same index and together are passed to jsonnet via --ext-code-file var=file.
// ext_code_file_vars:	<optional>  List of var names that maps to the code file defined in code_files at the same index
//									and together are passed to jsonnet via --ext-code-file var=file.
// tla_code_files:		<optional>	Dict of labels referencing code files and a var name, passed to jsonnet via --tla-code-file var=file.
// yaml_stream:			<optional>	Default: False. Set to 1 to write output as a YAML stream of JSON documents.
func (finfo FileInfo) newToJSONRule(name string) *rule.Rule {
	r := rule.NewRule(toJSONRule, name)
	r.SetAttr("src", finfo.Path.Filename)
	// TODO(jdrios): We are prepending "_" to minimize conflicts with other packages. Example:
	//
	// db/data.jsonnet
	// db/data.json
	//
	// ERROR: generated file 'data.json' in rule 'data_to_json' conflicts with existing source file
	//
	r.SetAttr("outs", []string{filepath.Join("_" + finfo.Path.Name + ".json")})
	r.SetAttr("visibility", []string{"//visibility:public"})

	// We are generating jsonnet_library rules for each jsonnet file. Therefore,
	// we can use the file's own jsonnet_library rule as only dependency.
	r.SetPrivateAttr(jsonnetSelfPrivateAttr, map[string]FilePath{finfo.Path.Filename: finfo.Path})

	return r
}

func (fpath FilePath) ruleName(conf *jsonnetConfig, prefix string) string {
	str := fpath.Name
	str = strings.ToLower(str)
	// Replace non [a-zA-Z0-9_] characters with "_"
	str = ruleRe.ReplaceAllString(str, "_")
	return str + "_" + prefix
}

func (fpath FilePath) newLabel(conf *jsonnetConfig, prefix string) label.Label {
	return label.New("", fpath.Dir, fpath.ruleName(conf, prefix))
}

func (fpath FilePath) newDataRef() string {
	return fmt.Sprintf("//:%s", fpath.Path)
}

func (fpath FilePath) newDataLabel() string {
	return fmt.Sprintf("//%s:%s", fpath.Dir, fpath.Filename)
}
